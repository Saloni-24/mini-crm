const jwt = require("jsonwebtoken");

//  to Check if token is valid (login proof)
const protect = (req, res, next) => {
  const tokenHeader = req.headers.authorization;

  if (!tokenHeader || !tokenHeader.startsWith("Bearer ")) {
    console.log(" Token is missing or format is wrong");
    return res.status(401).json({ message: "Login first! Token is required ðŸªª" });
  }

  const token = tokenHeader.split(" ")[1];

  try {
    const decodedUser = jwt.verify(token, process.env.JWT_SECRET );

    req.user = decodedUser;
    console.log(" Token verified, user is:", decodedUser.username);
    next();
  } catch (err) {
    console.log("something is wrong with token:", err.message);
    res.status(401).json({ message: "Token is invalid! Login again " });
  }
};

// Middleware: Check if user is admin
const isAdmin = (req, res, next) => {
  if (req.user && req.user.role === "admin") {
    console.log(" Admin access approved ");
    next();
  } else {
    console.log(" Access denied! you are not the admin..");
    res.status(403).json({ message: "Only admins allowed here! " });
  }
};

module.exports = { protect, isAdmin };
